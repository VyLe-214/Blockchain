import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import os

st.set_page_config(page_title="Stock Dashboard", page_icon=":chart_with_upwards_trend:", layout="wide")
st.title("üìä Stock Market Dashboard")

# =============================
# 1. ƒê·ªçc d·ªØ li·ªáu
# =============================
file_path = "CafeF.HSX.Upto23.09.2025.csv"

if os.path.exists(file_path):
    df = pd.read_csv(file_path)
    df.columns = df.columns.str.strip("<>").str.strip()
else:
    st.error(f"‚ùå Kh√¥ng t√¨m th·∫•y file: {file_path}")
    st.stop()

# =============================
# 2. Ti·ªÅn x·ª≠ l√Ω
# =============================
df["DTYYYYMMDD"] = pd.to_datetime(df["DTYYYYMMDD"], format="%Y%m%d", errors="coerce")
df = df.dropna(subset=["DTYYYYMMDD"])
df = df.sort_values(["Ticker", "DTYYYYMMDD"])
df["Point_Change"] = df.groupby("Ticker")["Close"].diff()
df["Pct_Change"] = df.groupby("Ticker")["Close"].pct_change() * 100

# =============================
# 3. Sidebar ch·ªçn c·ªï phi·∫øu
# =============================
st.sidebar.header("Ch·ªçn b·ªô l·ªçc")
tickers = df["Ticker"].unique()
selected_ticker = st.sidebar.selectbox("Ch·ªçn c·ªï phi·∫øu", tickers)
filtered_df = df[df["Ticker"] == selected_ticker].reset_index(drop=True)

# =============================
# 4. Ch·ªçn kho·∫£ng th·ªùi gian
# =============================
time_filter = st.sidebar.selectbox(
    "Ch·ªçn kho·∫£ng th·ªùi gian hi·ªÉn th·ªã",
    ["1D", "5D", "1M", "3M", "6M", "1Y", "5Y", "ALL"]
)

end_date = filtered_df['DTYYYYMMDD'].max()
days_map = {"1D": 1, "5D": 5, "1M": 30, "3M": 90, "6M": 180, "1Y": 365, "5Y": 1825}
if time_filter in days_map:
    start_date = end_date - pd.Timedelta(days=days_map[time_filter])
else:
    start_date = filtered_df['DTYYYYMMDD'].min()

df_plot = filtered_df[(filtered_df['DTYYYYMMDD'] >= start_date) &
                      (filtered_df['DTYYYYMMDD'] <= end_date)].reset_index(drop=True)
df_plot = df_plot[df_plot['DTYYYYMMDD'].dt.weekday < 5].reset_index(drop=True)

# =============================
# H√†m t√≠nh tr·ª•c y ƒë·ªông
# =============================
def get_yaxis_ticks(df_slice, n_ticks=7, pad_ratio=0.02):
    min_price = df_slice['Close'].min()
    max_price = df_slice['Close'].max()
    if min_price == max_price:
        y_min = min_price * 0.995
        y_max = max_price * 1.005
    else:
        y_min = min_price * (1 - pad_ratio)
        y_max = max_price * (1 + pad_ratio)
    price_range = y_max - y_min
    tick_step = price_range / (n_ticks - 1)
    tick_step = max(tick_step, 0.01)
    tick_step = round(tick_step) if tick_step > 1 else round(tick_step, 2)
    tick_start = tick_step * np.floor(y_min / tick_step)
    tick_end = tick_step * np.ceil(y_max / tick_step)
    tick_vals = np.arange(tick_start, tick_end + tick_step, tick_step)
    tick_vals = np.round(tick_vals, 2)
    return y_min, y_max, tick_vals

y_min, y_max, tick_vals_y = get_yaxis_ticks(df_plot)

# =============================
# H√†m format tr·ª•c X: ng√†y/th√°ng, hi·ªán nƒÉm khi ƒë·ªïi nƒÉm
# =============================
def format_date_label(dates):
    labels = []
    prev_year = None
    for d in dates:
        if prev_year is None or d.year != prev_year:
            labels.append(d.strftime("%d/%m/%Y"))
        else:
            labels.append(d.strftime("%d/%m"))
        prev_year = d.year
    return labels

# =============================
# Bi·ªÉu ƒë·ªì line gi√° ƒë√≥ng c·ª≠a
# =============================
start_price = df_plot["Close"].iloc[0]
end_price = df_plot["Close"].iloc[-1]
line_color = "green" if end_price >= start_price else "red"

fig = go.Figure()
fig.add_trace(go.Scatter(
    x=df_plot['DTYYYYMMDD'],
    y=df_plot["Close"],
    mode="lines",
    name=selected_ticker,
    line=dict(color=line_color, width=2),
    fill="tozeroy",
    fillcolor="rgba(0,0,0,0)"
))

# Tooltip
hover_text = []
for i, row in df_plot.iterrows():
    change = row["Point_Change"]
    pct = row["Pct_Change"]
    if pd.isna(change):
        hover_text.append(f"<b>{selected_ticker}</b><br>Gi√°: {row['Close']:.2f}<br>{row['DTYYYYMMDD'].strftime('%d/%m/%Y')}")
    else:
        sign = "+" if change >= 0 else "-"
        color = "green" if change >= 0 else "red"
        hover_text.append(f"<b>{selected_ticker}</b><br>Gi√°: {row['Close']:.2f}<br>"
                          f"<span style='color:{color}'>{sign}{abs(change):.2f} ({sign}{abs(pct):.2f}%)</span><br>"
                          f"{row['DTYYYYMMDD'].strftime('%d/%m/%Y')}")
fig.update_traces(hoverinfo="text", hovertext=hover_text)

# =============================
# Tr·ª•c X linh ho·∫°t
# =============================
if time_filter == "1D":
    tick_vals_x = pd.date_range(
        start=pd.Timestamp(end_date.date()) + pd.Timedelta(hours=9),
        end=pd.Timestamp(end_date.date()) + pd.Timedelta(hours=15),
        freq='H'
    )
    ticktext_x = [d.strftime("%H:%M") for d in tick_vals_x]
else:
    tick_vals_x = df_plot['DTYYYYMMDD']
    ticktext_x = format_date_label(tick_vals_x)

fig.update_layout(
    xaxis=dict(
        title="Ng√†y",
        type='category',
        tickvals=tick_vals_x,
        ticktext=ticktext_x,
        tickangle=-45
    ),
    yaxis=dict(
        title="Gi√°",
        range=[y_min, y_max],
        tickmode="array",
        tickvals=tick_vals_y,
        showgrid=True,
        gridcolor="lightgrey",
        gridwidth=1,
        griddash="dot"
    ),
    template="simple_white",
    legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1)
)

st.subheader(f"üìà Bi·ªÉu ƒë·ªì gi√° ƒë√≥ng c·ª≠a - {selected_ticker} ({time_filter})")
st.plotly_chart(fig, use_container_width=True)

# =============================
# Bi·ªÉu ƒë·ªì n·∫øn
# =============================
st.subheader(f"üïØÔ∏è Bi·ªÉu ƒë·ªì n·∫øn - {selected_ticker}")
fig_candle = go.Figure(data=[go.Candlestick(
    x=df_plot['DTYYYYMMDD'],
    open=df_plot["Open"],
    high=df_plot["High"],
    low=df_plot["Low"],
    close=df_plot["Close"],
    name=selected_ticker
)])
fig_candle.update_layout(
    title=f"Bi·ªÉu ƒë·ªì n·∫øn {selected_ticker}",
    xaxis=dict(
        title="Ng√†y",
        type='category',
        tickvals=tick_vals_x,
        ticktext=ticktext_x,
        tickangle=-45
    ),
    yaxis_title="Gi√°",
    xaxis_rangeslider_visible=False,
    template="plotly_dark"
)
st.plotly_chart(fig_candle, use_container_width=True)

# =============================
# D·ªØ li·ªáu th√¥ v√† t·∫£i xu·ªëng
# =============================
with st.expander("üìã Xem d·ªØ li·ªáu th√¥"):
    st.write(filtered_df)

csv = filtered_df.to_csv(index=False).encode("utf-8")
st.download_button("üì• T·∫£i d·ªØ li·ªáu l·ªçc", data=csv, file_name=f"{selected_ticker}_filtered.csv", mime="text/csv")
